"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sparticuz";
exports.ids = ["vendor-chunks/@sparticuz"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/esm/helper.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/esm/helper.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSymlink: () => (/* binding */ createSymlink),\n/* harmony export */   downloadAndExtract: () => (/* binding */ downloadAndExtract),\n/* harmony export */   downloadFile: () => (/* binding */ downloadFile),\n/* harmony export */   isRunningInAmazonLinux2023: () => (/* binding */ isRunningInAmazonLinux2023),\n/* harmony export */   isValidUrl: () => (/* binding */ isValidUrl),\n/* harmony export */   setupLambdaEnvironment: () => (/* binding */ setupLambdaEnvironment)\n/* harmony export */ });\n/* harmony import */ var follow_redirects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var tar_fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tar-fs */ \"(rsc)/./node_modules/tar-fs/index.js\");\n\n\n\n\n\n/**\n * Creates a symlink to a file\n */\nconst createSymlink = (source, target) => {\n    return new Promise((resolve, reject) => {\n        (0,node_fs__WEBPACK_IMPORTED_MODULE_1__.access)(source, (error) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            (0,node_fs__WEBPACK_IMPORTED_MODULE_1__.symlink)(source, target, (error) => {\n                /* c8 ignore next */\n                if (error) {\n                    /* c8 ignore next 3 */\n                    reject(error);\n                    return;\n                }\n                resolve();\n            });\n        });\n    });\n};\n/**\n * Downloads a file from a URL\n */\nconst downloadFile = (url, outputPath) => {\n    return new Promise((resolve, reject) => {\n        const stream = (0,node_fs__WEBPACK_IMPORTED_MODULE_1__.createWriteStream)(outputPath);\n        stream.once(\"error\", reject);\n        follow_redirects__WEBPACK_IMPORTED_MODULE_0__.https\n            .get(url, (response) => {\n            if (response.statusCode !== 200) {\n                stream.close();\n                reject(new Error(\n                /* c8 ignore next 2 */\n                `Unexpected status code: ${response.statusCode?.toFixed(0) ?? \"UNK\"}.`));\n                return;\n            }\n            // Pipe directly to file rather than manually writing chunks\n            // This is more efficient and uses less memory\n            response.pipe(stream);\n            // Listen for completion\n            stream.once(\"finish\", () => {\n                stream.close();\n                resolve();\n            });\n            // Handle response errors\n            response.once(\"error\", (error) => {\n                /* c8 ignore next 2 */\n                stream.close();\n                reject(error);\n            });\n        })\n            /* c8 ignore next 3 */\n            .on(\"error\", (error) => {\n            stream.close();\n            reject(error);\n        });\n    });\n};\n/**\n * Adds the proper folders to the environment\n * @param baseLibPath the path to this packages lib folder\n */\nconst setupLambdaEnvironment = (baseLibPath) => {\n    // If the FONTCONFIG_PATH is not set, set it to /tmp/fonts\n    process.env[\"FONTCONFIG_PATH\"] ??= (0,node_path__WEBPACK_IMPORTED_MODULE_3__.join)((0,node_os__WEBPACK_IMPORTED_MODULE_2__.tmpdir)(), \"fonts\");\n    // Set up Home folder if not already set\n    process.env[\"HOME\"] ??= (0,node_os__WEBPACK_IMPORTED_MODULE_2__.tmpdir)();\n    // If LD_LIBRARY_PATH is undefined, set it to baseLibPath, otherwise, add it\n    if (process.env[\"LD_LIBRARY_PATH\"] === undefined) {\n        process.env[\"LD_LIBRARY_PATH\"] = baseLibPath;\n    }\n    else if (!process.env[\"LD_LIBRARY_PATH\"].startsWith(baseLibPath)) {\n        process.env[\"LD_LIBRARY_PATH\"] = [\n            baseLibPath,\n            ...new Set(process.env[\"LD_LIBRARY_PATH\"].split(\":\")),\n        ].join(\":\");\n    }\n};\n/**\n * Determines if the input is a valid URL\n * @param input the input to check\n * @returns boolean indicating if the input is a valid URL\n */\nconst isValidUrl = (input) => {\n    try {\n        return Boolean(new URL(input));\n    }\n    catch {\n        return false;\n    }\n};\n/**\n * Determines if the running instance is inside an Amazon Linux 2023 container,\n * AWS_EXECUTION_ENV is for native Lambda instances\n * AWS_LAMBDA_JS_RUNTIME is for netlify instances\n * CODEBUILD_BUILD_IMAGE is for CodeBuild instances\n * VERCEL is for Vercel Functions (Node 20 or later enables an AL2023-compatible environment).\n * @returns boolean indicating if the running instance is inside a Lambda container with nodejs20\n */\nconst isRunningInAmazonLinux2023 = (nodeMajorVersion) => {\n    const awsExecEnv = process.env[\"AWS_EXECUTION_ENV\"] ?? \"\";\n    const awsLambdaJsRuntime = process.env[\"AWS_LAMBDA_JS_RUNTIME\"] ?? \"\";\n    const codebuildImage = process.env[\"CODEBUILD_BUILD_IMAGE\"] ?? \"\";\n    // Check for explicit version substrings, returns on first match\n    if (awsExecEnv.includes(\"20.x\") ||\n        awsExecEnv.includes(\"22.x\") ||\n        awsLambdaJsRuntime.includes(\"20.x\") ||\n        awsLambdaJsRuntime.includes(\"22.x\") ||\n        codebuildImage.includes(\"nodejs20\") ||\n        codebuildImage.includes(\"nodejs22\")) {\n        return true;\n    }\n    // Vercel: Node 20+ is AL2023 compatible\n    // eslint-disable-next-line sonarjs/prefer-single-boolean-return\n    if (process.env[\"VERCEL\"] && nodeMajorVersion >= 20) {\n        return true;\n    }\n    return false;\n};\nconst downloadAndExtract = async (url) => {\n    const getOptions = new URL(url);\n    // Increase the max body length to 60MB for larger files\n    getOptions.maxBodyLength = 60 * 1024 * 1024;\n    const destDir = (0,node_path__WEBPACK_IMPORTED_MODULE_3__.join)((0,node_os__WEBPACK_IMPORTED_MODULE_2__.tmpdir)(), \"chromium-pack\");\n    return new Promise((resolve, reject) => {\n        const extractObj = (0,tar_fs__WEBPACK_IMPORTED_MODULE_4__.extract)(destDir);\n        // Setup error handlers for better cleanup\n        /* c8 ignore next 5 */\n        const cleanupOnError = (err) => {\n            (0,node_fs__WEBPACK_IMPORTED_MODULE_1__.rm)(destDir, { force: true, recursive: true }, () => {\n                reject(err);\n            });\n        };\n        // Attach error handler to extract stream\n        extractObj.once(\"error\", cleanupOnError);\n        // Handle extraction completion\n        extractObj.once(\"finish\", () => {\n            resolve(destDir);\n        });\n        const req = follow_redirects__WEBPACK_IMPORTED_MODULE_0__.https.get(url, (response) => {\n            /* c8 ignore next */\n            if (response.statusCode !== 200) {\n                /* c8 ignore next 9 */\n                reject(new Error(`Unexpected status code: ${response.statusCode?.toFixed(0) ?? \"UNK\"}.`));\n                return;\n            }\n            // Pipe the response directly to the extraction stream\n            response.pipe(extractObj);\n            // Handle response errors\n            response.once(\"error\", cleanupOnError);\n        });\n        // Handle request errors\n        req.once(\"error\", cleanupOnError);\n        // Set a timeout to avoid hanging requests\n        req.setTimeout(60 * 1000, () => {\n            /* c8 ignore next 2 */\n            req.destroy();\n            cleanupOnError(new Error(\"Request timeout\"));\n        });\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/esm/helper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:url */ \"node:url\");\n/* harmony import */ var _helper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helper.js */ \"(rsc)/./node_modules/@sparticuz/chromium/build/esm/helper.js\");\n/* harmony import */ var _lambdafs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lambdafs.js */ \"(rsc)/./node_modules/@sparticuz/chromium/build/esm/lambdafs.js\");\n/* harmony import */ var _paths_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./paths.esm.js */ \"(rsc)/./node_modules/@sparticuz/chromium/build/esm/paths.esm.js\");\n\n\n\n\n\n\n\nconst nodeMajorVersion = Number.parseInt(process.versions.node.split(\".\")[0] ?? \"\");\n// Setup the lambda environment\nif ((0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.isRunningInAmazonLinux2023)(nodeMajorVersion)) {\n    (0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.setupLambdaEnvironment)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)((0,node_os__WEBPACK_IMPORTED_MODULE_1__.tmpdir)(), \"al2023\", \"lib\"));\n}\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass Chromium {\n    /**\n     * Returns a list of additional Chromium flags recommended for serverless environments.\n     * The canonical list of flags can be found on https://peter.sh/experiments/chromium-command-line-switches/.\n     * Most of below can be found here: https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md\n     */\n    static get args() {\n        const chromiumFlags = [\n            \"--ash-no-nudges\", // Avoids blue bubble \"user education\" nudges (eg., \"… give your browser a new look\", Memory Saver)\n            \"--disable-domain-reliability\", // Disables Domain Reliability Monitoring, which tracks whether the browser has difficulty contacting Google-owned sites and uploads reports to Google.\n            \"--disable-print-preview\", // https://source.chromium.org/search?q=lang:cpp+symbol:kDisablePrintPreview&ss=chromium\n            \"--disk-cache-size=33554432\", // https://source.chromium.org/search?q=lang:cpp+symbol:kDiskCacheSize&ss=chromium Forces the maximum disk space to be used by the disk cache, in bytes.\n            \"--no-default-browser-check\", // Disable the default browser check, do not prompt to set it as such. (This is already set by Playwright, but not Puppeteer)\n            \"--no-pings\", // Don't send hyperlink auditing pings\n            \"--single-process\", // Runs the renderer and plugins in the same process as the browser. NOTES: Needs to be single-process to avoid `prctl(PR_SET_NO_NEW_PRIVS) failed` error\n            \"--font-render-hinting=none\", // https://github.com/puppeteer/puppeteer/issues/2410#issuecomment-560573612\n        ];\n        const chromiumDisableFeatures = [\n            \"AudioServiceOutOfProcess\",\n            \"IsolateOrigins\",\n            \"site-per-process\", // Disables OOPIF. https://www.chromium.org/Home/chromium-security/site-isolation\n        ];\n        const chromiumEnableFeatures = [\"SharedArrayBuffer\"];\n        const graphicsFlags = [\n            \"--ignore-gpu-blocklist\", // https://source.chromium.org/search?q=lang:cpp+symbol:kIgnoreGpuBlocklist&ss=chromium\n            \"--in-process-gpu\", // Saves some memory by moving GPU process into a browser process thread\n        ];\n        // https://chromium.googlesource.com/chromium/src/+/main/docs/gpu/swiftshader.md\n        if (this.graphics) {\n            graphicsFlags.push(\n            // As the unsafe WebGL fallback, SwANGLE (ANGLE + SwiftShader Vulkan)\n            \"--use-gl=angle\", \"--use-angle=swiftshader\", \"--enable-unsafe-swiftshader\");\n        }\n        else {\n            graphicsFlags.push(\"--disable-webgl\");\n        }\n        const insecureFlags = [\n            \"--allow-running-insecure-content\", // https://source.chromium.org/search?q=lang:cpp+symbol:kAllowRunningInsecureContent&ss=chromium\n            \"--disable-setuid-sandbox\", // Lambda runs as root, so this is required to allow Chromium to run as root\n            \"--disable-site-isolation-trials\", // https://source.chromium.org/search?q=lang:cpp+symbol:kDisableSiteIsolation&ss=chromium\n            \"--disable-web-security\", // https://source.chromium.org/search?q=lang:cpp+symbol:kDisableWebSecurity&ss=chromium\n        ];\n        const headlessFlags = [\n            \"--headless='shell'\", // We only support running chrome-headless-shell\n            \"--no-sandbox\", // https://source.chromium.org/search?q=lang:cpp+symbol:kNoSandbox&ss=chromium\n            \"--no-zygote\", // https://source.chromium.org/search?q=lang:cpp+symbol:kNoZygote&ss=chromium\n        ];\n        return [\n            ...chromiumFlags,\n            `--disable-features=${[...chromiumDisableFeatures].join(\",\")}`,\n            `--enable-features=${[...chromiumEnableFeatures].join(\",\")}`,\n            ...graphicsFlags,\n            ...insecureFlags,\n            ...headlessFlags,\n        ];\n    }\n    /**\n     * Returns whether the graphics stack is enabled or disabled\n     * @returns boolean\n     */\n    static get graphics() {\n        return this.graphicsMode;\n    }\n    /**\n     * Sets whether the graphics stack is enabled or disabled.\n     * @param true means the stack is enabled. WebGL will work.\n     * @param false means that the stack is disabled. WebGL will not work.\n     * @default true\n     */\n    static set setGraphicsMode(value) {\n        if (typeof value !== \"boolean\") {\n            throw new TypeError(`Graphics mode must be a boolean, you entered '${String(value)}'`);\n        }\n        this.graphicsMode = value;\n    }\n    /**\n     * If true, the graphics stack and webgl is enabled,\n     * If false, webgl will be disabled.\n     * (If false, the swiftshader.tar.br file will also not extract)\n     */\n    static graphicsMode = true;\n    /**\n     * Inflates the included version of Chromium\n     * @param input The location of the `bin` folder\n     * @returns The path to the `chromium` binary\n     */\n    static async executablePath(input) {\n        /**\n         * If the `chromium` binary already exists in /tmp/chromium, return it.\n         */\n        if ((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)((0,node_os__WEBPACK_IMPORTED_MODULE_1__.tmpdir)(), \"chromium\"))) {\n            return (0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)((0,node_os__WEBPACK_IMPORTED_MODULE_1__.tmpdir)(), \"chromium\");\n        }\n        /**\n         * If input is a valid URL, download and extract the file. It will extract to /tmp/chromium-pack\n         * and executablePath will be recursively called on that location, which will then extract\n         * the brotli files to the correct locations\n         */\n        if (input && (0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.isValidUrl)(input)) {\n            return this.executablePath(await (0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.downloadAndExtract)(input));\n        }\n        /**\n         * If input is defined, use that as the location of the brotli files,\n         * otherwise, the default location is ../../bin.\n         * A custom location is needed for workflows that using custom packaging.\n         */\n        input ??= (0,_paths_esm_js__WEBPACK_IMPORTED_MODULE_6__.getBinPath)();\n        /**\n         * If the input directory doesn't exist, throw an error.\n         */\n        if (!(0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(input)) {\n            throw new Error(`The input directory \"${input}\" does not exist. Please provide the location of the brotli files.`);\n        }\n        // Extract the required files\n        const promises = [\n            (0,_lambdafs_js__WEBPACK_IMPORTED_MODULE_5__.inflate)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(input, \"chromium.br\")),\n            (0,_lambdafs_js__WEBPACK_IMPORTED_MODULE_5__.inflate)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(input, \"fonts.tar.br\")),\n            (0,_lambdafs_js__WEBPACK_IMPORTED_MODULE_5__.inflate)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(input, \"swiftshader.tar.br\")),\n        ];\n        if ((0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.isRunningInAmazonLinux2023)(nodeMajorVersion)) {\n            promises.push((0,_lambdafs_js__WEBPACK_IMPORTED_MODULE_5__.inflate)((0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(input, \"al2023.tar.br\")));\n        }\n        // Await all extractions\n        const result = await Promise.all(promises);\n        // Returns the first result of the promise, which is the location of the `chromium` binary\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return result.shift();\n    }\n    /**\n     * Downloads or symlinks a custom font and returns its basename, patching the environment so that Chromium can find it.\n     */\n    static async font(input) {\n        const fontsDir = process.env[\"FONTCONFIG_PATH\"] ??\n            (0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)(process.env[\"HOME\"] ?? (0,node_os__WEBPACK_IMPORTED_MODULE_1__.tmpdir)(), \".fonts\");\n        // Create fonts directory if it doesn't exist\n        if (!(0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(fontsDir)) {\n            (0,node_fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(fontsDir);\n        }\n        // Convert local path to file URL if needed\n        if (!/^https?:\\/\\//i.test(input)) {\n            input = `file://${input}`;\n        }\n        const url = new node_url__WEBPACK_IMPORTED_MODULE_3__.URL(input);\n        const fontName = url.pathname.split(\"/\").pop();\n        if (!fontName) {\n            throw new Error(`Invalid font name: ${url.pathname}`);\n        }\n        const outputPath = `${fontsDir}/${fontName}`;\n        // Return font name if it already exists\n        if ((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(outputPath)) {\n            return fontName;\n        }\n        // Handle local file\n        if (url.protocol === \"file:\") {\n            try {\n                await (0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.createSymlink)(url.pathname, outputPath);\n                return fontName;\n            }\n            catch (error) {\n                throw new Error(`Failed to create symlink for font: ${JSON.stringify(error)}`);\n            }\n        }\n        // Handle remote file\n        else {\n            try {\n                await (0,_helper_js__WEBPACK_IMPORTED_MODULE_4__.downloadFile)(input, outputPath);\n                return fontName;\n            }\n            catch (error) {\n                throw new Error(`Failed to download font: ${JSON.stringify(error)}`);\n            }\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Chromium);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/esm/lambdafs.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/esm/lambdafs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inflate: () => (/* binding */ inflate)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var tar_fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tar-fs */ \"(rsc)/./node_modules/tar-fs/index.js\");\n\n\n\n\n\n/**\n * Decompresses a (tarballed) Brotli or Gzip compressed file and returns the path to the decompressed file/folder.\n *\n * @param filePath Path of the file to decompress.\n */\nconst inflate = (filePath) => {\n    // Determine the output path based on the file type\n    const output = filePath.includes(\"swiftshader\")\n        ? (0,node_os__WEBPACK_IMPORTED_MODULE_1__.tmpdir)()\n        : (0,node_path__WEBPACK_IMPORTED_MODULE_2__.join)((0,node_os__WEBPACK_IMPORTED_MODULE_1__.tmpdir)(), (0,node_path__WEBPACK_IMPORTED_MODULE_2__.basename)(filePath).replace(/\\.(?:t(?:ar(?:\\.(?:br|gz))?|br|gz)|br|gz)$/i, \"\"));\n    return new Promise((resolve, reject) => {\n        // Quick return if the file is already decompressed\n        if (filePath.includes(\"swiftshader\")) {\n            if ((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(`${output}/libGLESv2.so`)) {\n                resolve(output);\n                return;\n            }\n        }\n        else if ((0,node_fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(output)) {\n            resolve(output);\n            return;\n        }\n        // Optimize chunk size based on file type - use smaller chunks for better memory usage\n        // Brotli files tend to decompress to much larger sizes\n        const isBrotli = /br$/i.test(filePath);\n        const isGzip = /gz$/i.test(filePath);\n        const isTar = /\\.t(?:ar(?:\\.(?:br|gz))?|br|gz)$/i.test(filePath);\n        // Use a smaller highWaterMark for better memory efficiency\n        // For most serverless environments, 4MB (2**22) is more memory-efficient than 8MB\n        const highWaterMark = 2 ** 22;\n        const source = (0,node_fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(filePath, { highWaterMark });\n        let target;\n        // Setup error handlers first for both streams\n        const handleError = (error) => {\n            reject(error);\n        };\n        source.once(\"error\", handleError);\n        // Setup the appropriate target stream based on file type\n        if (isTar) {\n            target = (0,tar_fs__WEBPACK_IMPORTED_MODULE_4__.extract)(output);\n            target.once(\"finish\", () => {\n                resolve(output);\n            });\n        }\n        else {\n            target = (0,node_fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(output, { mode: 0o700 });\n            target.once(\"close\", () => {\n                resolve(output);\n            });\n        }\n        target.once(\"error\", handleError);\n        // Pipe through the appropriate decompressor if needed\n        if (isBrotli || isGzip) {\n            // Use optimized chunk size for decompression\n            // 2MB (2**21) is sufficient for most brotli/gzip files\n            const decompressor = isBrotli\n                ? (0,node_zlib__WEBPACK_IMPORTED_MODULE_3__.createBrotliDecompress)({ chunkSize: 2 ** 21 })\n                : (0,node_zlib__WEBPACK_IMPORTED_MODULE_3__.createUnzip)({ chunkSize: 2 ** 21 });\n            // Handle decompressor errors\n            decompressor.once(\"error\", handleError);\n            // Chain the streams\n            source.pipe(decompressor).pipe(target);\n        }\n        else {\n            source.pipe(target);\n        }\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNwYXJ0aWN1ei9jaHJvbWl1bS9idWlsZC9lc20vbGFtYmRhZnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBFO0FBQ3pDO0FBQ1U7QUFDcUI7QUFDL0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLFVBQVUsK0NBQU07QUFDaEIsVUFBVSwrQ0FBSSxDQUFDLCtDQUFNLElBQUksbURBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1EQUFVLElBQUksT0FBTztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtREFBVTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHlEQUFnQixhQUFhLGVBQWU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwrQ0FBTztBQUM1QjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxxQkFBcUIsMERBQWlCLFdBQVcsYUFBYTtBQUM5RDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlFQUFzQixHQUFHLG9CQUFvQjtBQUMvRCxrQkFBa0Isc0RBQVcsR0FBRyxvQkFBb0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbXBsZV9sZWZ0Ly4vbm9kZV9tb2R1bGVzL0BzcGFydGljdXovY2hyb21pdW0vYnVpbGQvZXNtL2xhbWJkYWZzLmpzPzk3YTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmVhZFN0cmVhbSwgY3JlYXRlV3JpdGVTdHJlYW0sIGV4aXN0c1N5bmMgfSBmcm9tIFwibm9kZTpmc1wiO1xuaW1wb3J0IHsgdG1wZGlyIH0gZnJvbSBcIm5vZGU6b3NcIjtcbmltcG9ydCB7IGJhc2VuYW1lLCBqb2luIH0gZnJvbSBcIm5vZGU6cGF0aFwiO1xuaW1wb3J0IHsgY3JlYXRlQnJvdGxpRGVjb21wcmVzcywgY3JlYXRlVW56aXAgfSBmcm9tIFwibm9kZTp6bGliXCI7XG5pbXBvcnQgeyBleHRyYWN0IH0gZnJvbSBcInRhci1mc1wiO1xuLyoqXG4gKiBEZWNvbXByZXNzZXMgYSAodGFyYmFsbGVkKSBCcm90bGkgb3IgR3ppcCBjb21wcmVzc2VkIGZpbGUgYW5kIHJldHVybnMgdGhlIHBhdGggdG8gdGhlIGRlY29tcHJlc3NlZCBmaWxlL2ZvbGRlci5cbiAqXG4gKiBAcGFyYW0gZmlsZVBhdGggUGF0aCBvZiB0aGUgZmlsZSB0byBkZWNvbXByZXNzLlxuICovXG5leHBvcnQgY29uc3QgaW5mbGF0ZSA9IChmaWxlUGF0aCkgPT4ge1xuICAgIC8vIERldGVybWluZSB0aGUgb3V0cHV0IHBhdGggYmFzZWQgb24gdGhlIGZpbGUgdHlwZVxuICAgIGNvbnN0IG91dHB1dCA9IGZpbGVQYXRoLmluY2x1ZGVzKFwic3dpZnRzaGFkZXJcIilcbiAgICAgICAgPyB0bXBkaXIoKVxuICAgICAgICA6IGpvaW4odG1wZGlyKCksIGJhc2VuYW1lKGZpbGVQYXRoKS5yZXBsYWNlKC9cXC4oPzp0KD86YXIoPzpcXC4oPzpicnxneikpP3xicnxneil8YnJ8Z3opJC9pLCBcIlwiKSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gUXVpY2sgcmV0dXJuIGlmIHRoZSBmaWxlIGlzIGFscmVhZHkgZGVjb21wcmVzc2VkXG4gICAgICAgIGlmIChmaWxlUGF0aC5pbmNsdWRlcyhcInN3aWZ0c2hhZGVyXCIpKSB7XG4gICAgICAgICAgICBpZiAoZXhpc3RzU3luYyhgJHtvdXRwdXR9L2xpYkdMRVN2Mi5zb2ApKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvdXRwdXQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleGlzdHNTeW5jKG91dHB1dCkpIHtcbiAgICAgICAgICAgIHJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBPcHRpbWl6ZSBjaHVuayBzaXplIGJhc2VkIG9uIGZpbGUgdHlwZSAtIHVzZSBzbWFsbGVyIGNodW5rcyBmb3IgYmV0dGVyIG1lbW9yeSB1c2FnZVxuICAgICAgICAvLyBCcm90bGkgZmlsZXMgdGVuZCB0byBkZWNvbXByZXNzIHRvIG11Y2ggbGFyZ2VyIHNpemVzXG4gICAgICAgIGNvbnN0IGlzQnJvdGxpID0gL2JyJC9pLnRlc3QoZmlsZVBhdGgpO1xuICAgICAgICBjb25zdCBpc0d6aXAgPSAvZ3okL2kudGVzdChmaWxlUGF0aCk7XG4gICAgICAgIGNvbnN0IGlzVGFyID0gL1xcLnQoPzphcig/OlxcLig/OmJyfGd6KSk/fGJyfGd6KSQvaS50ZXN0KGZpbGVQYXRoKTtcbiAgICAgICAgLy8gVXNlIGEgc21hbGxlciBoaWdoV2F0ZXJNYXJrIGZvciBiZXR0ZXIgbWVtb3J5IGVmZmljaWVuY3lcbiAgICAgICAgLy8gRm9yIG1vc3Qgc2VydmVybGVzcyBlbnZpcm9ubWVudHMsIDRNQiAoMioqMjIpIGlzIG1vcmUgbWVtb3J5LWVmZmljaWVudCB0aGFuIDhNQlxuICAgICAgICBjb25zdCBoaWdoV2F0ZXJNYXJrID0gMiAqKiAyMjtcbiAgICAgICAgY29uc3Qgc291cmNlID0gY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCwgeyBoaWdoV2F0ZXJNYXJrIH0pO1xuICAgICAgICBsZXQgdGFyZ2V0O1xuICAgICAgICAvLyBTZXR1cCBlcnJvciBoYW5kbGVycyBmaXJzdCBmb3IgYm90aCBzdHJlYW1zXG4gICAgICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uub25jZShcImVycm9yXCIsIGhhbmRsZUVycm9yKTtcbiAgICAgICAgLy8gU2V0dXAgdGhlIGFwcHJvcHJpYXRlIHRhcmdldCBzdHJlYW0gYmFzZWQgb24gZmlsZSB0eXBlXG4gICAgICAgIGlmIChpc1Rhcikge1xuICAgICAgICAgICAgdGFyZ2V0ID0gZXh0cmFjdChvdXRwdXQpO1xuICAgICAgICAgICAgdGFyZ2V0Lm9uY2UoXCJmaW5pc2hcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUob3V0cHV0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0ID0gY3JlYXRlV3JpdGVTdHJlYW0ob3V0cHV0LCB7IG1vZGU6IDBvNzAwIH0pO1xuICAgICAgICAgICAgdGFyZ2V0Lm9uY2UoXCJjbG9zZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvdXRwdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0Lm9uY2UoXCJlcnJvclwiLCBoYW5kbGVFcnJvcik7XG4gICAgICAgIC8vIFBpcGUgdGhyb3VnaCB0aGUgYXBwcm9wcmlhdGUgZGVjb21wcmVzc29yIGlmIG5lZWRlZFxuICAgICAgICBpZiAoaXNCcm90bGkgfHwgaXNHemlwKSB7XG4gICAgICAgICAgICAvLyBVc2Ugb3B0aW1pemVkIGNodW5rIHNpemUgZm9yIGRlY29tcHJlc3Npb25cbiAgICAgICAgICAgIC8vIDJNQiAoMioqMjEpIGlzIHN1ZmZpY2llbnQgZm9yIG1vc3QgYnJvdGxpL2d6aXAgZmlsZXNcbiAgICAgICAgICAgIGNvbnN0IGRlY29tcHJlc3NvciA9IGlzQnJvdGxpXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVCcm90bGlEZWNvbXByZXNzKHsgY2h1bmtTaXplOiAyICoqIDIxIH0pXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVVbnppcCh7IGNodW5rU2l6ZTogMiAqKiAyMSB9KTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBkZWNvbXByZXNzb3IgZXJyb3JzXG4gICAgICAgICAgICBkZWNvbXByZXNzb3Iub25jZShcImVycm9yXCIsIGhhbmRsZUVycm9yKTtcbiAgICAgICAgICAgIC8vIENoYWluIHRoZSBzdHJlYW1zXG4gICAgICAgICAgICBzb3VyY2UucGlwZShkZWNvbXByZXNzb3IpLnBpcGUodGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZS5waXBlKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/esm/lambdafs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sparticuz/chromium/build/esm/paths.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sparticuz/chromium/build/esm/paths.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBinPath: () => (/* binding */ getBinPath)\n/* harmony export */ });\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:url */ \"node:url\");\n\n\n/**\n * Get the bin directory path for ESM modules\n */\nfunction getBinPath() {\n    return (0,node_path__WEBPACK_IMPORTED_MODULE_0__.join)((0,node_path__WEBPACK_IMPORTED_MODULE_0__.dirname)((0,node_url__WEBPACK_IMPORTED_MODULE_1__.fileURLToPath)(\"file:///D:/test/blog_event/sample_left_v2%201/sample_left_v2/node_modules/@sparticuz/chromium/build/esm/paths.esm.js\")), \"..\", \"..\", \"bin\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNwYXJ0aWN1ei9jaHJvbWl1bS9idWlsZC9lc20vcGF0aHMuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNEO0FBQ3pDO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVywrQ0FBSSxDQUFDLGtEQUFPLENBQUMsdURBQWEsQ0FBQyxzSEFBZTtBQUNyRCIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbXBsZV9sZWZ0Ly4vbm9kZV9tb2R1bGVzL0BzcGFydGljdXovY2hyb21pdW0vYnVpbGQvZXNtL3BhdGhzLmVzbS5qcz9jYTA3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpcm5hbWUsIGpvaW4gfSBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSBcIm5vZGU6dXJsXCI7XG4vKipcbiAqIEdldCB0aGUgYmluIGRpcmVjdG9yeSBwYXRoIGZvciBFU00gbW9kdWxlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmluUGF0aCgpIHtcbiAgICByZXR1cm4gam9pbihkaXJuYW1lKGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKSksIFwiLi5cIiwgXCIuLlwiLCBcImJpblwiKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sparticuz/chromium/build/esm/paths.esm.js\n");

/***/ })

};
;