"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/blog-comments/start/route";
exports.ids = ["app/api/blog-comments/start/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "puppeteer-core":
/*!*********************************!*\
  !*** external "puppeteer-core" ***!
  \*********************************/
/***/ ((module) => {

module.exports = import("puppeteer-core");;

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:os":
/*!**************************!*\
  !*** external "node:os" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:os");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fblog-comments%2Fstart%2Froute&page=%2Fapi%2Fblog-comments%2Fstart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fblog-comments%2Fstart%2Froute.ts&appDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fblog-comments%2Fstart%2Froute&page=%2Fapi%2Fblog-comments%2Fstart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fblog-comments%2Fstart%2Froute.ts&appDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_test_blog_event_sample_left_v2_1_sample_left_v2_src_app_api_blog_comments_start_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/blog-comments/start/route.ts */ \"(rsc)/./src/app/api/blog-comments/start/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([D_test_blog_event_sample_left_v2_1_sample_left_v2_src_app_api_blog_comments_start_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\nD_test_blog_event_sample_left_v2_1_sample_left_v2_src_app_api_blog_comments_start_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/blog-comments/start/route\",\n        pathname: \"/api/blog-comments/start\",\n        filename: \"route\",\n        bundlePath: \"app/api/blog-comments/start/route\"\n    },\n    resolvedPagePath: \"D:\\\\test\\\\blog_event\\\\sample_left_v2 1\\\\sample_left_v2\\\\src\\\\app\\\\api\\\\blog-comments\\\\start\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_test_blog_event_sample_left_v2_1_sample_left_v2_src_app_api_blog_comments_start_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/blog-comments/start/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZibG9nLWNvbW1lbnRzJTJGc3RhcnQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmJsb2ctY29tbWVudHMlMkZzdGFydCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmJsb2ctY29tbWVudHMlMkZzdGFydCUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDdGVzdCU1Q2Jsb2dfZXZlbnQlNUNzYW1wbGVfbGVmdF92MiUyMDElNUNzYW1wbGVfbGVmdF92MiU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q3Rlc3QlNUNibG9nX2V2ZW50JTVDc2FtcGxlX2xlZnRfdjIlMjAxJTVDc2FtcGxlX2xlZnRfdjImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3FEO0FBQ2xJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZILHFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2FtcGxlX2xlZnQvP2RmNTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcdGVzdFxcXFxibG9nX2V2ZW50XFxcXHNhbXBsZV9sZWZ0X3YyIDFcXFxcc2FtcGxlX2xlZnRfdjJcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYmxvZy1jb21tZW50c1xcXFxzdGFydFxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYmxvZy1jb21tZW50cy9zdGFydC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Jsb2ctY29tbWVudHMvc3RhcnRcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2Jsb2ctY29tbWVudHMvc3RhcnQvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFx0ZXN0XFxcXGJsb2dfZXZlbnRcXFxcc2FtcGxlX2xlZnRfdjIgMVxcXFxzYW1wbGVfbGVmdF92MlxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxibG9nLWNvbW1lbnRzXFxcXHN0YXJ0XFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9ibG9nLWNvbW1lbnRzL3N0YXJ0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fblog-comments%2Fstart%2Froute&page=%2Fapi%2Fblog-comments%2Fstart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fblog-comments%2Fstart%2Froute.ts&appDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/blog-comments/start/route.ts":
/*!**************************************************!*\
  !*** ./src/app/api/blog-comments/start/route.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_job_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/job-manager */ \"(rsc)/./src/lib/job-manager.ts\");\n/* harmony import */ var _lib_puppeteer_simple__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/puppeteer-simple */ \"(rsc)/./src/lib/puppeteer-simple.ts\");\n/* harmony import */ var _lib_csv_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/csv-utils */ \"(rsc)/./src/lib/csv-utils.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_puppeteer_simple__WEBPACK_IMPORTED_MODULE_2__]);\n_lib_puppeteer_simple__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n/**\n * 네이버 블로그 URL 파싱\n */ function parseBlogUrl(url) {\n    try {\n        let normalizedUrl = url.trim();\n        if (!normalizedUrl.startsWith(\"http\")) {\n            normalizedUrl = \"https://\" + normalizedUrl;\n        }\n        const urlObj = new URL(normalizedUrl);\n        if (urlObj.hostname === \"blog.naver.com\") {\n            const pathParts = urlObj.pathname.split(\"/\").filter((p)=>p);\n            if (pathParts.length >= 2) {\n                return {\n                    blogId: pathParts[0],\n                    logNo: pathParts[1]\n                };\n            }\n        }\n        if (urlObj.hostname === \"m.blog.naver.com\") {\n            const blogId = urlObj.searchParams.get(\"blogId\");\n            const logNo = urlObj.searchParams.get(\"logNo\");\n            if (blogId && logNo) {\n                return {\n                    blogId,\n                    logNo\n                };\n            }\n        }\n        return null;\n    } catch  {\n        return null;\n    }\n}\n/**\n * POST /api/blog-comments/start\n * 백그라운드 댓글 수집 작업 시작\n */ async function POST(request) {\n    try {\n        const body = await request.json();\n        const { blogUrl } = body;\n        if (!blogUrl) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"블로그 URL을 입력해주세요\"\n            }, {\n                status: 400\n            });\n        }\n        // URL 파싱\n        const parsed = parseBlogUrl(blogUrl);\n        if (!parsed) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"올바른 네이버 블로그 URL 형식이 아닙니다\"\n            }, {\n                status: 400\n            });\n        }\n        // 작업 생성\n        const job = (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.createJob)(blogUrl);\n        console.log(`새로운 작업 생성: ${job.id} - ${blogUrl}`);\n        // 백그라운드에서 댓글 수집 시작 (비동기)\n        processCommentsInBackground(job.id, parsed.blogId, parsed.logNo).catch((error)=>{\n            console.error(`작업 ${job.id} 백그라운드 처리 오류:`, error);\n            (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.failJob)(job.id, error.message || \"알 수 없는 오류가 발생했습니다\");\n        });\n        // 즉시 응답 반환 (작업 ID)\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            jobId: job.id,\n            message: \"댓글 수집 작업이 시작되었습니다\"\n        });\n    } catch (error) {\n        console.error(\"작업 시작 오류:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : \"작업 시작 중 오류가 발생했습니다\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * 백그라운드 댓글 수집 처리\n */ async function processCommentsInBackground(jobId, blogId, logNo) {\n    try {\n        // 작업 시작\n        (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.updateJob)(jobId, {\n            status: \"processing\",\n            progress: 5\n        });\n        console.log(`작업 ${jobId} 처리 시작: ${blogId}/${logNo}`);\n        // 단순 버전으로 댓글 수집 (jobId 전달하여 실시간 업데이트)\n        const result = await (0,_lib_puppeteer_simple__WEBPACK_IMPORTED_MODULE_2__.scrapeNaverBlogCommentsSimple)(blogId, logNo, jobId);\n        // 수집된 모든 댓글 추가\n        (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.addComments)(jobId, result.comments);\n        // 진행률 업데이트\n        (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.updateJob)(jobId, {\n            progress: 95,\n            totalComments: result.total\n        });\n        console.log(`작업 ${jobId}: ${result.comments.length}개 댓글 수집 완료`);\n        // 작업 완료 - CSV 생성\n        const job = (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.updateJob)(jobId, {\n            progress: 98\n        });\n        if (!job) {\n            throw new Error(\"작업을 찾을 수 없습니다\");\n        }\n        console.log(`작업 ${jobId}: CSV 생성 중... (총 ${job.comments.length}개 댓글)`);\n        const csvData = (0,_lib_csv_utils__WEBPACK_IMPORTED_MODULE_3__.convertCommentsToCSV)(job.comments);\n        // 작업 완료 처리\n        (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.completeJob)(jobId, csvData);\n        console.log(`작업 ${jobId} 완료: ${job.comments.length}개 댓글 수집`);\n    } catch (error) {\n        console.error(`작업 ${jobId} 처리 실패:`, error);\n        (0,_lib_job_manager__WEBPACK_IMPORTED_MODULE_1__.failJob)(jobId, error instanceof Error ? error.message : \"댓글 수집 중 오류가 발생했습니다\");\n    }\n}\nconst dynamic = \"force-dynamic\";\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/blog-comments/start/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/csv-utils.ts":
/*!******************************!*\
  !*** ./src/lib/csv-utils.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertCommentsToCSV: () => (/* binding */ convertCommentsToCSV),\n/* harmony export */   downloadCSV: () => (/* binding */ downloadCSV)\n/* harmony export */ });\n/**\n * 댓글 데이터를 CSV 형식으로 변환\n * @param comments 댓글 데이터 배열\n * @returns CSV 문자열 (UTF-8 BOM 포함)\n */ function convertCommentsToCSV(comments) {\n    // CSV 헤더\n    const headers = [\n        \"작성일\",\n        \"구분\",\n        \"닉네임\",\n        \"작성자 URL\",\n        \"공감수\",\n        \"링크수\",\n        \"답글수\",\n        \"첨부 이미지 URL\",\n        \"댓글 내용\"\n    ];\n    // CSV 행 생성\n    const rows = comments.map((comment)=>[\n            comment.createdAt,\n            comment.commentType,\n            comment.nickname,\n            comment.authorUrl,\n            comment.likes.toString(),\n            comment.links.toString(),\n            comment.replyCount.toString(),\n            comment.imageUrl,\n            comment.content.replace(/\"/g, '\"\"') // 따옴표 이스케이프\n        ]);\n    // CSV 문자열 생성\n    const csvContent = [\n        headers.join(\",\"),\n        ...rows.map((row)=>row.map((cell)=>`\"${cell}\"`).join(\",\"))\n    ].join(\"\\n\");\n    // UTF-8 BOM 추가 (엑셀에서 한글 깨짐 방지)\n    return \"\\uFEFF\" + csvContent;\n}\n/**\n * CSV 파일 다운로드\n * @param comments 댓글 데이터 배열\n * @param filename 파일명 (기본값: naver-blog-comments.csv)\n */ function downloadCSV(comments, filename = \"naver-blog-comments.csv\") {\n    const csv = convertCommentsToCSV(comments);\n    const blob = new Blob([\n        csv\n    ], {\n        type: \"text/csv;charset=utf-8;\"\n    });\n    const link = document.createElement(\"a\");\n    if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", filename);\n        link.style.visibility = \"hidden\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2Nzdi11dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUVBOzs7O0NBSUMsR0FDTSxTQUFTQSxxQkFBcUJDLFFBQXVCO0lBQzFELFNBQVM7SUFDVCxNQUFNQyxVQUFVO1FBQ2Q7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRCxXQUFXO0lBQ1gsTUFBTUMsT0FBT0YsU0FBU0csR0FBRyxDQUFDQyxDQUFBQSxVQUFXO1lBQ25DQSxRQUFRQyxTQUFTO1lBQ2pCRCxRQUFRRSxXQUFXO1lBQ25CRixRQUFRRyxRQUFRO1lBQ2hCSCxRQUFRSSxTQUFTO1lBQ2pCSixRQUFRSyxLQUFLLENBQUNDLFFBQVE7WUFDdEJOLFFBQVFPLEtBQUssQ0FBQ0QsUUFBUTtZQUN0Qk4sUUFBUVEsVUFBVSxDQUFDRixRQUFRO1lBQzNCTixRQUFRUyxRQUFRO1lBQ2hCVCxRQUFRVSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxNQUFNLE1BQU0sWUFBWTtTQUNqRDtJQUVELGFBQWE7SUFDYixNQUFNQyxhQUFhO1FBQ2pCZixRQUFRZ0IsSUFBSSxDQUFDO1dBQ1ZmLEtBQUtDLEdBQUcsQ0FBQ2UsQ0FBQUEsTUFDVkEsSUFBSWYsR0FBRyxDQUFDZ0IsQ0FBQUEsT0FBUSxDQUFDLENBQUMsRUFBRUEsS0FBSyxDQUFDLENBQUMsRUFBRUYsSUFBSSxDQUFDO0tBRXJDLENBQUNBLElBQUksQ0FBQztJQUVQLCtCQUErQjtJQUMvQixPQUFPLFdBQVdEO0FBQ3BCO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNJLFlBQVlwQixRQUF1QixFQUFFcUIsV0FBbUIseUJBQXlCO0lBQy9GLE1BQU1DLE1BQU12QixxQkFBcUJDO0lBQ2pDLE1BQU11QixPQUFPLElBQUlDLEtBQUs7UUFBQ0Y7S0FBSSxFQUFFO1FBQUVHLE1BQU07SUFBMEI7SUFDL0QsTUFBTUMsT0FBT0MsU0FBU0MsYUFBYSxDQUFDO0lBRXBDLElBQUlGLEtBQUtHLFFBQVEsS0FBS0MsV0FBVztRQUMvQixNQUFNQyxNQUFNQyxJQUFJQyxlQUFlLENBQUNWO1FBQ2hDRyxLQUFLUSxZQUFZLENBQUMsUUFBUUg7UUFDMUJMLEtBQUtRLFlBQVksQ0FBQyxZQUFZYjtRQUM5QkssS0FBS1MsS0FBSyxDQUFDQyxVQUFVLEdBQUc7UUFDeEJULFNBQVNVLElBQUksQ0FBQ0MsV0FBVyxDQUFDWjtRQUMxQkEsS0FBS2EsS0FBSztRQUNWWixTQUFTVSxJQUFJLENBQUNHLFdBQVcsQ0FBQ2Q7UUFDMUJNLElBQUlTLGVBQWUsQ0FBQ1Y7SUFDdEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbXBsZV9sZWZ0Ly4vc3JjL2xpYi9jc3YtdXRpbHMudHM/MjBmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbG9nQ29tbWVudCB9IGZyb20gJ0AvdHlwZXMvYmxvZy1jb21tZW50JztcblxuLyoqXG4gKiDrjJPquIAg642w7J207YSw66W8IENTViDtmJXsi53snLzroZwg67OA7ZmYXG4gKiBAcGFyYW0gY29tbWVudHMg64yT6riAIOuNsOydtO2EsCDrsLDsl7RcbiAqIEByZXR1cm5zIENTViDrrLjsnpDsl7QgKFVURi04IEJPTSDtj6ztlagpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Q29tbWVudHNUb0NTVihjb21tZW50czogQmxvZ0NvbW1lbnRbXSk6IHN0cmluZyB7XG4gIC8vIENTViDtl6TrjZRcbiAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAn7J6R7ISx7J28JyxcbiAgICAn6rWs67aEJyxcbiAgICAn64uJ64Sk7J6EJyxcbiAgICAn7J6R7ISx7J6QIFVSTCcsXG4gICAgJ+qzteqwkOyImCcsXG4gICAgJ+unge2BrOyImCcsXG4gICAgJ+uLteq4gOyImCcsXG4gICAgJ+yyqOu2gCDsnbTrr7jsp4AgVVJMJyxcbiAgICAn64yT6riAIOuCtOyaqSdcbiAgXTtcblxuICAvLyBDU1Yg7ZaJIOyDneyEsVxuICBjb25zdCByb3dzID0gY29tbWVudHMubWFwKGNvbW1lbnQgPT4gW1xuICAgIGNvbW1lbnQuY3JlYXRlZEF0LFxuICAgIGNvbW1lbnQuY29tbWVudFR5cGUsXG4gICAgY29tbWVudC5uaWNrbmFtZSxcbiAgICBjb21tZW50LmF1dGhvclVybCxcbiAgICBjb21tZW50Lmxpa2VzLnRvU3RyaW5nKCksXG4gICAgY29tbWVudC5saW5rcy50b1N0cmluZygpLFxuICAgIGNvbW1lbnQucmVwbHlDb3VudC50b1N0cmluZygpLFxuICAgIGNvbW1lbnQuaW1hZ2VVcmwsXG4gICAgY29tbWVudC5jb250ZW50LnJlcGxhY2UoL1wiL2csICdcIlwiJykgLy8g65Sw7Ji07ZGcIOydtOyKpOy8gOydtO2UhFxuICBdKTtcblxuICAvLyBDU1Yg66y47J6Q7Je0IOyDneyEsVxuICBjb25zdCBjc3ZDb250ZW50ID0gW1xuICAgIGhlYWRlcnMuam9pbignLCcpLFxuICAgIC4uLnJvd3MubWFwKHJvdyA9PlxuICAgICAgcm93Lm1hcChjZWxsID0+IGBcIiR7Y2VsbH1cImApLmpvaW4oJywnKVxuICAgIClcbiAgXS5qb2luKCdcXG4nKTtcblxuICAvLyBVVEYtOCBCT00g7LaU6rCAICjsl5HshYDsl5DshJwg7ZWc6riAIOq5qOynkCDrsKnsp4ApXG4gIHJldHVybiAnXFx1RkVGRicgKyBjc3ZDb250ZW50O1xufVxuXG4vKipcbiAqIENTViDtjIzsnbwg64uk7Jq066Gc65OcXG4gKiBAcGFyYW0gY29tbWVudHMg64yT6riAIOuNsOydtO2EsCDrsLDsl7RcbiAqIEBwYXJhbSBmaWxlbmFtZSDtjIzsnbzrqoUgKOq4sOuzuOqwkjogbmF2ZXItYmxvZy1jb21tZW50cy5jc3YpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZENTVihjb21tZW50czogQmxvZ0NvbW1lbnRbXSwgZmlsZW5hbWU6IHN0cmluZyA9ICduYXZlci1ibG9nLWNvbW1lbnRzLmNzdicpOiB2b2lkIHtcbiAgY29uc3QgY3N2ID0gY29udmVydENvbW1lbnRzVG9DU1YoY29tbWVudHMpO1xuICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2Nzdl0sIHsgdHlwZTogJ3RleHQvY3N2O2NoYXJzZXQ9dXRmLTg7JyB9KTtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICBpZiAobGluay5kb3dubG9hZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCk7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZmlsZW5hbWUpO1xuICAgIGxpbmsuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgbGluay5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY29udmVydENvbW1lbnRzVG9DU1YiLCJjb21tZW50cyIsImhlYWRlcnMiLCJyb3dzIiwibWFwIiwiY29tbWVudCIsImNyZWF0ZWRBdCIsImNvbW1lbnRUeXBlIiwibmlja25hbWUiLCJhdXRob3JVcmwiLCJsaWtlcyIsInRvU3RyaW5nIiwibGlua3MiLCJyZXBseUNvdW50IiwiaW1hZ2VVcmwiLCJjb250ZW50IiwicmVwbGFjZSIsImNzdkNvbnRlbnQiLCJqb2luIiwicm93IiwiY2VsbCIsImRvd25sb2FkQ1NWIiwiZmlsZW5hbWUiLCJjc3YiLCJibG9iIiwiQmxvYiIsInR5cGUiLCJsaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZG93bmxvYWQiLCJ1bmRlZmluZWQiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwicmV2b2tlT2JqZWN0VVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/csv-utils.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/job-manager.ts":
/*!********************************!*\
  !*** ./src/lib/job-manager.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addComments: () => (/* binding */ addComments),\n/* harmony export */   cleanupOldJobs: () => (/* binding */ cleanupOldJobs),\n/* harmony export */   completeJob: () => (/* binding */ completeJob),\n/* harmony export */   createJob: () => (/* binding */ createJob),\n/* harmony export */   failJob: () => (/* binding */ failJob),\n/* harmony export */   getAllJobs: () => (/* binding */ getAllJobs),\n/* harmony export */   getJob: () => (/* binding */ getJob),\n/* harmony export */   updateJob: () => (/* binding */ updateJob),\n/* harmony export */   updateJobProgress: () => (/* binding */ updateJobProgress)\n/* harmony export */ });\nconst jobs = globalThis.__jobs ?? new Map();\nif (true) {\n    globalThis.__jobs = jobs;\n}\n// 작업 자동 정리 (1시간 후)\nconst JOB_CLEANUP_TIME = 60 * 60 * 1000; // 1시간\n/**\n * 새로운 작업 생성\n */ function createJob(blogUrl) {\n    const id = generateJobId();\n    const job = {\n        id,\n        blogUrl,\n        status: \"pending\",\n        progress: 0,\n        totalComments: 0,\n        collectedComments: 0,\n        comments: [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n    };\n    jobs.set(id, job);\n    // 자동 정리 스케줄\n    setTimeout(()=>{\n        jobs.delete(id);\n        console.log(`작업 ${id} 자동 삭제됨`);\n    }, JOB_CLEANUP_TIME);\n    return job;\n}\n/**\n * 작업 조회\n */ function getJob(id) {\n    return jobs.get(id);\n}\n/**\n * 작업 상태 업데이트\n */ function updateJob(id, updates) {\n    const job = jobs.get(id);\n    if (!job) return undefined;\n    Object.assign(job, updates, {\n        updatedAt: new Date()\n    });\n    jobs.set(id, job);\n    return job;\n}\n/**\n * 작업 진행률 업데이트\n */ function updateJobProgress(id, progress, collectedComments, totalComments) {\n    const updates = {\n        progress: Math.min(100, Math.max(0, progress)),\n        collectedComments\n    };\n    if (totalComments !== undefined) {\n        updates.totalComments = totalComments;\n    }\n    return updateJob(id, updates);\n}\n/**\n * 댓글 추가\n */ function addComments(id, newComments) {\n    const job = jobs.get(id);\n    if (!job) return undefined;\n    job.comments.push(...newComments);\n    job.collectedComments = job.comments.length;\n    job.updatedAt = new Date();\n    jobs.set(id, job);\n    return job;\n}\n/**\n * 작업 완료 처리\n */ function completeJob(id, csvData) {\n    return updateJob(id, {\n        status: \"completed\",\n        progress: 100,\n        csvData\n    });\n}\n/**\n * 작업 실패 처리\n */ function failJob(id, error) {\n    return updateJob(id, {\n        status: \"failed\",\n        error\n    });\n}\n/**\n * 모든 작업 조회 (디버깅용)\n */ function getAllJobs() {\n    return Array.from(jobs.values());\n}\n/**\n * 작업 ID 생성\n */ function generateJobId() {\n    return `job_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n}\n/**\n * 작업 정리 (최대 개수 제한)\n */ function cleanupOldJobs(maxJobs = 100) {\n    if (jobs.size <= maxJobs) return;\n    const sortedJobs = Array.from(jobs.entries()).sort((a, b)=>a[1].createdAt.getTime() - b[1].createdAt.getTime());\n    const toDelete = sortedJobs.slice(0, jobs.size - maxJobs);\n    toDelete.forEach(([id])=>{\n        jobs.delete(id);\n        console.log(`작업 ${id} 정리됨 (최대 개수 초과)`);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/job-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/puppeteer-simple.ts":
/*!*************************************!*\
  !*** ./src/lib/puppeteer-simple.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrapeNaverBlogCommentsSimple: () => (/* binding */ scrapeNaverBlogCommentsSimple)\n/* harmony export */ });\n/* harmony import */ var _puppeteer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./puppeteer */ \"(rsc)/./src/lib/puppeteer.ts\");\n/* harmony import */ var _job_manager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./job-manager */ \"(rsc)/./src/lib/job-manager.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_puppeteer__WEBPACK_IMPORTED_MODULE_0__]);\n_puppeteer__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\n * 네이버 블로그 댓글 크롤링 (단순 버전)\n */ async function scrapeNaverBlogCommentsSimple(blogId, logNo, jobId) {\n    const browser = await (0,_puppeteer__WEBPACK_IMPORTED_MODULE_0__.getBrowser)();\n    const page = await browser.newPage();\n    // 브라우저 콘솔 로그를 서버 콘솔로 전달\n    page.on(\"console\", (msg)=>{\n        console.log(\"[Browser]\", msg.text());\n    });\n    try {\n        // User Agent 설정\n        await page.setUserAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\");\n        const url = `https://blog.naver.com/${blogId}/${logNo}`;\n        console.log(\"페이지 접속:\", url);\n        await page.goto(url, {\n            waitUntil: \"networkidle0\",\n            timeout: 30000\n        });\n        console.log(\"페이지 로드 완료, 3초 대기...\");\n        await new Promise((resolve)=>setTimeout(resolve, 3000));\n        // 현재 페이지 URL 확인 (리다이렉트 체크)\n        const currentUrl = page.url();\n        console.log(`현재 페이지 URL: ${currentUrl}`);\n        if (!currentUrl.includes(logNo)) {\n            console.log(`경고: 페이지가 리다이렉트되었거나 게시글 URL이 다릅니다. (예상: ${logNo})`);\n        }\n        // 모든 프레임에서 \"댓글\" 버튼 찾아서 클릭\n        console.log('\"댓글\" 버튼 찾는 중...');\n        const frames = page.frames();\n        let buttonClicked = false;\n        for(let i = 0; i < frames.length; i++){\n            const frame = frames[i];\n            if (frame.url() === \"about:blank\" || frame.url() === \"\") continue;\n            try {\n                const clicked = await frame.evaluate(()=>{\n                    // \"댓글\" 텍스트를 포함하는 모든 클릭 가능한 요소 찾기\n                    const allElements = Array.from(document.querySelectorAll(\"button, a, div, span\"));\n                    for (const el of allElements){\n                        const text = el.textContent?.trim() || \"\";\n                        // \"댓글\" 포함하지만 해시태그(#)는 제외\n                        if (text.includes(\"댓글\") && !text.includes(\"#\") && text.length < 30) {\n                            // 해시태그 링크가 아닌지 확인\n                            const href = el.href || \"\";\n                            if (href.includes(\"tagName=\") || href.includes(\"tag=\")) {\n                                console.log(`해시태그 제외: \"${text}\"`);\n                                continue;\n                            }\n                            // 클래스나 ID에 tag가 포함된 경우도 제외\n                            const className = el.className || \"\";\n                            const id = el.id || \"\";\n                            if (className.includes(\"tag\") || id.includes(\"tag\")) {\n                                console.log(`태그 요소 제외: \"${text}\"`);\n                                continue;\n                            }\n                            console.log(`\"댓글\" 버튼 발견: \"${text}\"`);\n                            // 클릭 가능한지 확인\n                            if (el.offsetParent !== null) {\n                                console.log(\"버튼 클릭 시도...\");\n                                el.click();\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                });\n                if (clicked) {\n                    console.log(`✓ 프레임 ${i}에서 \"댓글\" 버튼 클릭 성공!`);\n                    buttonClicked = true;\n                    break;\n                }\n            } catch (e) {\n            // 무시\n            }\n        }\n        if (buttonClicked) {\n            console.log(\"댓글 로딩 대기 중 (5초)...\");\n            await new Promise((resolve)=>setTimeout(resolve, 5000));\n        } else {\n            console.log('경고: \"댓글\" 버튼을 찾지 못했습니다. 스크롤로 시도...');\n            // 스크롤로 시도\n            await page.evaluate(()=>{\n                window.scrollTo(0, document.body.scrollHeight);\n            });\n            await new Promise((resolve)=>setTimeout(resolve, 3000));\n        }\n        console.log(\"댓글 프레임 확인...\");\n        let allComments = [];\n        // 모든 프레임 URL 로그 출력 (디버깅용)\n        const allFrames = page.frames();\n        console.log(`총 ${allFrames.length}개의 프레임 발견:`);\n        allFrames.forEach((frame, index)=>{\n            console.log(`  프레임 ${index}: ${frame.url()}`);\n        });\n        // 댓글이 있는 프레임 찾기 (여러 패턴 시도)\n        let commentFrame = allFrames.find((f)=>f.url().includes(\"PostView.naver\"));\n        if (!commentFrame) {\n            // PostView.naver를 못 찾으면 logNo가 포함된 프레임 찾기\n            commentFrame = allFrames.find((f)=>f.url().includes(`logNo=${logNo}`));\n        }\n        if (!commentFrame) {\n            // 그래도 못 찾으면 다른 댓글 관련 패턴 시도 (단, PostListByTagName은 제외)\n            commentFrame = allFrames.find((f)=>(f.url().includes(\"CommentBox\") || f.url().includes(\"comment\") || f.url().includes(\"blogId=\") && f.url().includes(blogId)) && !f.url().includes(\"PostListByTagName\"));\n        }\n        if (!commentFrame) {\n            // 여전히 못 찾으면 메인 프레임 사용\n            console.log(\"경고: 댓글 전용 프레임을 찾을 수 없습니다. 메인 프레임에서 시도합니다.\");\n            commentFrame = page.mainFrame();\n        }\n        console.log(`댓글 프레임 선택: ${commentFrame.url()}`);\n        // 페이지네이션이 나타날 때까지 대기 (최대 10초)\n        console.log(\"페이지네이션 로딩 대기 중...\");\n        await new Promise((resolve)=>setTimeout(resolve, 3000));\n        // 마지막 페이지 번호 감지 (역순 수집을 위해 마지막부터 시작)\n        const lastPageNumber = await commentFrame.evaluate(()=>{\n            const pagination = document.querySelector(\".u_cbox_paginate\");\n            if (!pagination) {\n                console.log(\"페이지네이션을 찾을 수 없습니다.\");\n                // 페이지네이션이 없을 때: 현재 페이지의 활성 페이지 번호 찾기\n                // 네이버 블로그는 페이지네이션 없이도 활성 페이지 번호가 표시될 수 있음\n                const allElements = Array.from(document.querySelectorAll('strong, em, span, [class*=\"current\"]'));\n                for (const el of allElements){\n                    const text = el.textContent?.trim() || \"\";\n                    const pageNum = parseInt(text);\n                    if (!isNaN(pageNum) && pageNum > 0 && pageNum < 200) {\n                        console.log(`페이지네이션 없이 활성 페이지 감지: ${pageNum}`);\n                        return pageNum;\n                    }\n                }\n                console.log(\"페이지 번호를 전혀 찾을 수 없습니다. 1페이지로 시작합니다.\");\n                return 1;\n            }\n            // 방법 1: 현재 활성화된 페이지 찾기 (첫 로드 시 마지막 페이지가 활성화됨)\n            const activePageElement = pagination.querySelector(\".u_cbox_page_current, .u_cbox_num_page.on, strong, em\");\n            if (activePageElement) {\n                const pageNum = parseInt(activePageElement.textContent?.trim() || \"0\");\n                if (!isNaN(pageNum) && pageNum > 0) {\n                    console.log(`활성 페이지에서 감지: ${pageNum}`);\n                    return pageNum;\n                }\n            }\n            // 방법 2: 모든 페이지 번호 요소를 찾아 가장 큰 번호 추출\n            const pageElements = Array.from(pagination.querySelectorAll(\"a, span, strong, em\"));\n            const pageNumbers = pageElements.map((el)=>parseInt(el.textContent?.trim() || \"0\")).filter((num)=>!isNaN(num) && num > 0);\n            if (pageNumbers.length > 0) {\n                const maxPage = Math.max(...pageNumbers);\n                console.log(`모든 페이지 번호에서 최대값 감지: ${maxPage}`);\n                return maxPage;\n            }\n            // 방법 3: 실패 시 1로 fallback (안전하게 첫 페이지부터)\n            console.log(\"페이지 번호 감지 실패. 1페이지로 시작합니다.\");\n            return 1;\n        });\n        let currentPageNumber = lastPageNumber;\n        console.log(`\\n=== 수집 시작 ===`);\n        console.log(`마지막 페이지 번호: ${lastPageNumber}`);\n        console.log(`예상 최대 댓글 수: 약 ${lastPageNumber * 50}개`);\n        // Job에 전체 페이지 수 업데이트\n        if (jobId) {\n            (0,_job_manager__WEBPACK_IMPORTED_MODULE_1__.updateJob)(jobId, {\n                totalPages: lastPageNumber,\n                totalComments: lastPageNumber * 50\n            });\n        }\n        // 페이지 순회하면서 댓글 수집\n        let pageCount = 1;\n        const maxPages = 100; // 최대 페이지 제한 (무한 루프 방지) - 최대 5,000개 댓글 수집 가능\n        while(pageCount <= maxPages && currentPageNumber >= 1){\n            console.log(`\\n=== 페이지 ${pageCount} (번호: ${currentPageNumber}) 수집 시작 ===`);\n            // Job에 현재 페이지 업데이트\n            if (jobId) {\n                const progress = Math.min(90, pageCount / Math.max(lastPageNumber, 1) * 90);\n                (0,_job_manager__WEBPACK_IMPORTED_MODULE_1__.updateJob)(jobId, {\n                    currentPage: currentPageNumber,\n                    progress: Math.round(progress),\n                    collectedComments: allComments.length\n                });\n            }\n            try {\n                // 스크롤 시도\n                await commentFrame.evaluate(()=>{\n                    window.scrollTo(0, document.body.scrollHeight);\n                }).catch(()=>{});\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n                // 댓글 수집\n                const comments = await commentFrame.evaluate(()=>{\n                    const results = [];\n                    // 네이버 블로그 댓글 컨테이너 찾기\n                    const commentContainers = [\n                        \"#cbox_module\",\n                        \".u_cbox\",\n                        'div[id*=\"comment\"]',\n                        'div[class*=\"comment\"]'\n                    ];\n                    let commentArea = null;\n                    for (const sel of commentContainers){\n                        const el = document.querySelector(sel);\n                        if (el) {\n                            commentArea = el;\n                            break;\n                        }\n                    }\n                    if (!commentArea) {\n                        commentArea = document.body;\n                    }\n                    // 네이버 블로그 댓글 셀렉터\n                    const commentSelectors = [\n                        \".u_cbox_comment_box\",\n                        \".u_cbox_list > li\",\n                        'li[class*=\"comment\"]'\n                    ];\n                    let commentElements = null;\n                    for (const sel of commentSelectors){\n                        const elements = commentArea.querySelectorAll(sel);\n                        if (elements.length > 0) {\n                            commentElements = elements;\n                            break;\n                        }\n                    }\n                    if (!commentElements || commentElements.length === 0) {\n                        return results;\n                    }\n                    commentElements.forEach((element)=>{\n                        try {\n                            const text = element.textContent?.trim() || \"\";\n                            if (text.length < 5) {\n                                return;\n                            }\n                            // 댓글 타입 구분 (댓글/답글)\n                            let commentType = \"댓글\";\n                            // 답글은 보통 들여쓰기, 특정 클래스, 또는 부모 요소로 구분됨\n                            const isReply = element.classList.contains(\"u_cbox_reply\") || element.classList.contains(\"reply\") || element.closest(\".u_cbox_reply\") !== null || element.closest('[class*=\"reply\"]') !== null || element.querySelector(\".u_cbox_reply_depth\") !== null || element.classList.contains(\"u_cbox_comment_box_reply\") || element.parentElement?.classList.contains(\"u_cbox_reply_list\");\n                            if (isReply) {\n                                commentType = \"답글\";\n                            }\n                            // 닉네임 및 작성자 URL 찾기\n                            let nickname = \"익명\";\n                            let authorUrl = \"\";\n                            const nickSelectors = [\n                                \".u_cbox_nick\",\n                                \".nickname\",\n                                '[class*=\"nick\"]',\n                                '[class*=\"name\"]'\n                            ];\n                            for (const sel of nickSelectors){\n                                const el = element.querySelector(sel);\n                                if (el?.textContent?.trim()) {\n                                    nickname = el.textContent.trim();\n                                    // 닉네임 요소 내부 또는 부모의 링크 찾기\n                                    const linkElement = el.querySelector(\"a\") || el.closest(\"a\") || el.parentElement?.querySelector(\"a\");\n                                    if (linkElement) {\n                                        authorUrl = linkElement.getAttribute(\"href\") || \"\";\n                                        // 상대 경로인 경우 절대 경로로 변환\n                                        if (authorUrl && !authorUrl.startsWith(\"http\")) {\n                                            authorUrl = `https://blog.naver.com${authorUrl.startsWith(\"/\") ? \"\" : \"/\"}${authorUrl}`;\n                                        }\n                                    }\n                                    break;\n                                }\n                            }\n                            // 날짜 찾기\n                            let createdAt = \"\";\n                            const dateSelectors = [\n                                \".u_cbox_date\",\n                                \".date\",\n                                '[class*=\"date\"]',\n                                '[class*=\"time\"]'\n                            ];\n                            for (const sel of dateSelectors){\n                                const el = element.querySelector(sel);\n                                if (el?.textContent?.trim()) {\n                                    createdAt = el.textContent.trim();\n                                    break;\n                                }\n                            }\n                            // 댓글 내용 찾기 - 더 정확한 셀렉터 사용\n                            let content = \"\";\n                            // 방법 1: 댓글 내용만 정확히 추출\n                            const contentTextArea = element.querySelector(\".u_cbox_contents_inner, .u_cbox_text_wrap, .u_cbox_contents\");\n                            if (contentTextArea) {\n                                // 텍스트 노드만 추출 (자식 요소 제외)\n                                const textNode = Array.from(contentTextArea.childNodes).filter((node)=>node.nodeType === Node.TEXT_NODE || node.nodeType === Node.ELEMENT_NODE && !node.matches('.u_cbox_btn_recomm, .u_cbox_btn_reply, button, [class*=\"btn\"]')).map((node)=>node.textContent?.trim()).filter((text)=>text && text.length > 0).join(\" \");\n                                if (textNode) {\n                                    content = textNode;\n                                }\n                            }\n                            // 방법 2: 여전히 비어있으면 다른 셀렉터 시도\n                            if (!content) {\n                                const contentSelectors = [\n                                    \".u_cbox_contents\",\n                                    \".comment_text\"\n                                ];\n                                for (const sel of contentSelectors){\n                                    const el = element.querySelector(sel);\n                                    if (el?.textContent?.trim()) {\n                                        content = el.textContent.trim();\n                                        break;\n                                    }\n                                }\n                            }\n                            // 공감수 찾기\n                            let likes = 0;\n                            const likeSelectors = [\n                                \".u_cbox_cnt_recomm\",\n                                \".u_cbox_recomm_count\",\n                                '[class*=\"recomm\"]',\n                                '[class*=\"sympathy\"]'\n                            ];\n                            for (const sel of likeSelectors){\n                                const likeEl = element.querySelector(sel);\n                                if (likeEl) {\n                                    const likeText = likeEl.textContent?.trim() || \"\";\n                                    // \"공감\"이라는 텍스트가 포함된 경우에만 공감수로 처리\n                                    if (likeText.includes(\"공감\")) {\n                                        const match = likeText.match(/(\\d+)/);\n                                        if (match) {\n                                            likes = parseInt(match[1]);\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            // 공감수가 댓글 내용에 포함된 경우 제거\n                            if (likes > 0) {\n                                content = content.replace(/공감\\s*\\d+|\\d+\\s*공감/g, \"\").trim();\n                            }\n                            // 메타데이터 텍스트 제거 (신고, 답글 등)\n                            content = content.replace(/신고\\s*답글|답글\\s*신고|신고|답글/g, \"\").trim();\n                            // 첨부 이미지 URL 찾기\n                            let imageUrl = \"\";\n                            const imageSelectors = [\n                                \".u_cbox_contents img\",\n                                \".comment_text img\",\n                                '[class*=\"contents\"] img',\n                                'img[class*=\"attach\"]',\n                                'img[class*=\"image\"]',\n                                \".u_cbox_attached img\"\n                            ];\n                            for (const sel of imageSelectors){\n                                const imgEl = element.querySelector(sel);\n                                if (imgEl) {\n                                    imageUrl = imgEl.getAttribute(\"src\") || imgEl.getAttribute(\"data-src\") || \"\";\n                                    if (imageUrl) {\n                                        // 상대 경로인 경우 절대 경로로 변환\n                                        if (!imageUrl.startsWith(\"http\")) {\n                                            imageUrl = `https:${imageUrl.startsWith(\"//\") ? \"\" : \"//\"}${imageUrl}`;\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                            results.push({\n                                createdAt,\n                                commentType,\n                                nickname,\n                                authorUrl,\n                                likes,\n                                replyCount: 0,\n                                imageUrl,\n                                links: 0,\n                                content\n                            });\n                        } catch (e) {\n                            console.error(\"댓글 파싱 오류:\", e);\n                        }\n                    });\n                    return results;\n                });\n                console.log(`페이지 ${currentPageNumber}: ${comments.length}개 댓글 수집`);\n                allComments.push(...comments);\n                // 다음 페이지 번호 클릭 (현재 페이지 - 1)\n                const nextPageNumber = currentPageNumber - 1;\n                if (nextPageNumber < 1) {\n                    console.log(\"페이지 1에 도달했습니다. 수집 완료!\");\n                    break;\n                }\n                console.log(`페이지 번호 ${nextPageNumber} 찾는 중...`);\n                // 먼저 페이지 번호를 찾아서 클릭 시도\n                const pageClicked = await commentFrame.evaluate((targetPage)=>{\n                    // 페이지네이션에서 숫자 찾기\n                    const pagination = document.querySelector(\".u_cbox_paginate\");\n                    if (!pagination) {\n                        console.log(\"페이지네이션을 찾을 수 없습니다\");\n                        return false;\n                    }\n                    const allElements = Array.from(pagination.querySelectorAll(\"a, button, span, div\"));\n                    for (const el of allElements){\n                        const text = el.textContent?.trim() || \"\";\n                        const pageNum = parseInt(text);\n                        // 정확한 페이지 번호 찾기\n                        if (pageNum === targetPage) {\n                            console.log(`페이지 ${targetPage} 버튼 발견`);\n                            // 클릭 가능한지 확인\n                            if (el.offsetParent !== null) {\n                                console.log(`페이지 ${targetPage} 클릭 시도...`);\n                                el.click();\n                                return true;\n                            }\n                        }\n                    }\n                    console.log(`페이지 ${targetPage} 버튼을 찾을 수 없습니다`);\n                    return false;\n                }, nextPageNumber);\n                if (pageClicked) {\n                    console.log(`✓ 페이지 ${nextPageNumber} 클릭 성공!`);\n                } else {\n                    // 페이지 번호가 안 보이면 \"이전\" 버튼 클릭\n                    console.log(`페이지 번호가 보이지 않음. \"이전\" 버튼 클릭 시도...`);\n                    const prevClicked = await commentFrame.evaluate(()=>{\n                        const pagination = document.querySelector(\".u_cbox_paginate\");\n                        if (!pagination) {\n                            console.log(\"페이지네이션을 찾을 수 없습니다\");\n                            return false;\n                        }\n                        // 방법 1: title 속성으로 \"이전 페이지 목록으로 이동하기\" 찾기\n                        const prevByTitle = pagination.querySelector('[title*=\"이전 페이지\"]');\n                        if (prevByTitle && prevByTitle.offsetParent !== null) {\n                            console.log(`\"이전\" 버튼 발견 (title): ${prevByTitle.getAttribute(\"title\")}`);\n                            prevByTitle.click();\n                            return true;\n                        }\n                        // 방법 2: aria-label 속성으로 찾기\n                        const prevByAria = pagination.querySelector('[aria-label*=\"이전\"]');\n                        if (prevByAria && prevByAria.offsetParent !== null) {\n                            console.log(`\"이전\" 버튼 발견 (aria-label): ${prevByAria.getAttribute(\"aria-label\")}`);\n                            prevByAria.click();\n                            return true;\n                        }\n                        // 방법 3: 클래스명으로 \"이전\" 버튼 찾기\n                        const prevByClass = pagination.querySelector('.u_cbox_btn_prev, .u_cbox_pre, [class*=\"prev\"], [class*=\"pre\"]');\n                        if (prevByClass && prevByClass.offsetParent !== null) {\n                            console.log(`\"이전\" 버튼 발견 (클래스): ${prevByClass.className}`);\n                            prevByClass.click();\n                            return true;\n                        }\n                        // 방법 4: 페이지네이션 내의 모든 요소를 순회하며 찾기\n                        const allElements = Array.from(pagination.querySelectorAll(\"a, button\"));\n                        for (const el of allElements){\n                            const text = el.textContent?.trim() || \"\";\n                            const title = el.getAttribute(\"title\") || \"\";\n                            const ariaLabel = el.getAttribute(\"aria-label\") || \"\";\n                            const className = el.className || \"\";\n                            // title이나 aria-label에 \"이전 페이지\"가 포함된 경우\n                            if (title.includes(\"이전 페이지\") || ariaLabel.includes(\"이전 페이지\")) {\n                                console.log(`\"이전\" 버튼 발견: title=\"${title}\", aria-label=\"${ariaLabel}\"`);\n                                if (el.offsetParent !== null) {\n                                    console.log(\"이전 버튼 클릭 시도...\");\n                                    el.click();\n                                    return true;\n                                }\n                            }\n                        }\n                        console.log('\"이전\" 버튼을 찾을 수 없습니다');\n                        return false;\n                    });\n                    if (!prevClicked) {\n                        console.log('\"이전\" 버튼도 찾을 수 없습니다. 수집 완료!');\n                        break;\n                    }\n                    console.log('✓ \"이전\" 버튼 클릭 성공!');\n                    // \"이전\" 버튼을 클릭했으므로 페이지 로딩 대기 (좀 더 길게)\n                    console.log(\"페이지 로딩 대기 중 (5초)...\");\n                    await new Promise((resolve)=>setTimeout(resolve, 5000));\n                    // 현재 페이지 번호 다시 감지\n                    const newPageInfo = await commentFrame.evaluate(()=>{\n                        const pagination = document.querySelector(\".u_cbox_paginate\");\n                        if (!pagination) {\n                            console.log(\"페이지네이션을 찾을 수 없습니다\");\n                            return null;\n                        }\n                        // 여러 방법으로 현재 페이지 찾기\n                        // 방법 1: 클래스로 찾기\n                        let activePageElement = pagination.querySelector(\".u_cbox_page_current, .u_cbox_num_page.on, strong\");\n                        // 방법 2: on 클래스를 포함하는 요소 찾기\n                        if (!activePageElement) {\n                            const allElements = Array.from(pagination.querySelectorAll(\"a, span, strong, em\"));\n                            activePageElement = allElements.find((el)=>{\n                                const className = el.className || \"\";\n                                return className.includes(\"on\") || className.includes(\"current\") || el.tagName === \"STRONG\" || el.tagName === \"EM\";\n                            }) || null;\n                        }\n                        // 방법 3: 숫자만 있는 요소들 중에서 링크가 아닌 것 찾기\n                        if (!activePageElement) {\n                            const allElements = Array.from(pagination.querySelectorAll(\"span, strong, em\"));\n                            for (const el of allElements){\n                                const text = el.textContent?.trim() || \"\";\n                                const pageNum = parseInt(text);\n                                if (!isNaN(pageNum) && pageNum > 0) {\n                                    console.log(`현재 페이지 후보: ${pageNum} (태그: ${el.tagName})`);\n                                    activePageElement = el;\n                                    break;\n                                }\n                            }\n                        }\n                        if (activePageElement) {\n                            const pageNum = parseInt(activePageElement.textContent?.trim() || \"0\");\n                            console.log(`현재 페이지: ${pageNum} (태그: ${activePageElement.tagName}, 클래스: ${activePageElement.className})`);\n                            return pageNum;\n                        }\n                        console.log(\"현재 활성화된 페이지를 찾을 수 없습니다\");\n                        return null;\n                    });\n                    if (newPageInfo && newPageInfo > 0) {\n                        currentPageNumber = newPageInfo;\n                        console.log(`페이지 번호 재감지 성공: ${currentPageNumber}`);\n                        pageCount++;\n                        continue; // 다음 루프에서 이 페이지 수집\n                    } else {\n                        console.log(\"페이지 번호를 재감지할 수 없습니다. 수집 완료!\");\n                        break;\n                    }\n                }\n                // 페이지 로딩 대기\n                console.log(\"페이지 로딩 대기 중 (3초)...\");\n                await new Promise((resolve)=>setTimeout(resolve, 3000));\n                currentPageNumber = nextPageNumber;\n                pageCount++;\n            } catch (e) {\n                console.log(`페이지 ${currentPageNumber} 처리 오류:`, e);\n                break;\n            }\n        }\n        console.log(`\\n=== 전체 수집 완료: 총 ${allComments.length}개 댓글 ===`);\n        // 답글수 계산 (각 댓글에 대해 바로 아래 답글의 개수를 세기)\n        for(let i = 0; i < allComments.length; i++){\n            const comment = allComments[i];\n            // 댓글(답글이 아닌 경우)만 답글 수 계산\n            if (comment.commentType === \"댓글\") {\n                let replyCount = 0;\n                // 현재 댓글 다음부터 순회하면서 연속된 답글 카운트\n                for(let j = i + 1; j < allComments.length; j++){\n                    if (allComments[j].commentType === \"답글\") {\n                        replyCount++;\n                    } else {\n                        break;\n                    }\n                }\n                comment.replyCount = replyCount;\n            }\n        }\n        console.log(\"답글수 계산 완료\");\n        return {\n            comments: allComments,\n            total: allComments.length\n        };\n    } catch (error) {\n        console.error(\"크롤링 오류:\", error);\n        throw error;\n    } finally{\n        await page.close();\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/puppeteer-simple.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/puppeteer.ts":
/*!******************************!*\
  !*** ./src/lib/puppeteer.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeBrowser: () => (/* binding */ closeBrowser),\n/* harmony export */   getBrowser: () => (/* binding */ getBrowser),\n/* harmony export */   scrapeNaverBlogComments: () => (/* binding */ scrapeNaverBlogComments)\n/* harmony export */ });\n/* harmony import */ var puppeteer_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! puppeteer-core */ \"puppeteer-core\");\n/* harmony import */ var _sparticuz_chromium__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sparticuz/chromium */ \"(rsc)/./node_modules/@sparticuz/chromium/build/esm/index.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([puppeteer_core__WEBPACK_IMPORTED_MODULE_0__]);\npuppeteer_core__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nlet browserInstance = null;\n/**\n * Puppeteer 브라우저 인스턴스 가져오기 (싱글톤)\n */ async function getBrowser() {\n    if (browserInstance) {\n        return browserInstance;\n    }\n    const isProduction = \"development\" === \"production\";\n    if (isProduction) {\n        // Vercel 프로덕션 환경\n        browserInstance = await puppeteer_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].launch({\n            args: _sparticuz_chromium__WEBPACK_IMPORTED_MODULE_1__[\"default\"].args,\n            defaultViewport: {\n                width: 1280,\n                height: 720\n            },\n            executablePath: await _sparticuz_chromium__WEBPACK_IMPORTED_MODULE_1__[\"default\"].executablePath(),\n            headless: true\n        });\n    } else {\n        // 로컬 개발 환경\n        // Chrome 또는 Chromium 경로 자동 감지\n        const possiblePaths = [\n            \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n            \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n            \"/usr/bin/google-chrome\",\n            \"/usr/bin/chromium-browser\",\n            \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"\n        ];\n        let executablePath = process.env.CHROME_PATH || process.env.PUPPETEER_EXECUTABLE_PATH;\n        if (!executablePath) {\n            for (const path of possiblePaths){\n                try {\n                    const fs = __webpack_require__(/*! fs */ \"fs\");\n                    if (fs.existsSync(path)) {\n                        executablePath = path;\n                        break;\n                    }\n                } catch (e) {\n                    continue;\n                }\n            }\n        }\n        browserInstance = await puppeteer_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"].launch({\n            executablePath,\n            headless: true,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-setuid-sandbox\",\n                \"--disable-dev-shm-usage\",\n                \"--disable-gpu\"\n            ]\n        });\n    }\n    return browserInstance;\n}\n/**\n * 브라우저 종료\n */ async function closeBrowser() {\n    if (browserInstance) {\n        await browserInstance.close();\n        browserInstance = null;\n    }\n}\n/**\n * 네이버 블로그 댓글 크롤링\n */ async function scrapeNaverBlogComments(blogId, logNo) {\n    const browser = await getBrowser();\n    const page = await browser.newPage();\n    try {\n        // User Agent 설정\n        await page.setUserAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\");\n        // 블로그 포스트 페이지 접속\n        const url = `https://blog.naver.com/${blogId}/${logNo}`;\n        console.log(\"크롤링 시작:\", url);\n        await page.goto(url, {\n            waitUntil: \"networkidle0\",\n            timeout: 30000\n        });\n        // iframe으로 전환\n        const frames = page.frames();\n        const mainFrame = frames.find((frame)=>frame.url().includes(\"PostView.naver\") || frame.url().includes(\"PostView.nhn\"));\n        if (!mainFrame) {\n            throw new Error(\"메인 프레임을 찾을 수 없습니다\");\n        }\n        console.log(\"메인 프레임 발견:\", mainFrame.url());\n        // 댓글 영역이 로드될 때까지 대기\n        console.log(\"댓글 로딩 대기 중...\");\n        // 스크롤하여 모든 댓글 로드\n        await mainFrame.evaluate(()=>{\n            window.scrollTo(0, document.body.scrollHeight);\n        });\n        await new Promise((resolve)=>setTimeout(resolve, 3000));\n        // 댓글 더보기 버튼 클릭 시도\n        try {\n            await mainFrame.evaluate(()=>{\n                const moreButtons = Array.from(document.querySelectorAll(\"a, button, span\")).filter((el)=>{\n                    const text = el.textContent?.trim() || \"\";\n                    return text.includes(\"더보기\") || text.includes(\"more\") || text.includes(\"댓글\");\n                });\n                moreButtons.forEach((btn)=>{\n                    if (btn.click) {\n                        btn.click();\n                    }\n                });\n            });\n            await new Promise((resolve)=>setTimeout(resolve, 2000));\n        } catch (e) {\n            console.log(\"더보기 버튼 클릭 시도 실패\");\n        }\n        // 페이지 HTML 구조 확인 (디버깅)\n        const pageContent = await mainFrame.content();\n        console.log('페이지에 \"댓글\" 텍스트 포함 여부:', pageContent.includes(\"댓글\"));\n        // 댓글 iframe이 있는지 확인\n        const commentFrames = page.frames().filter((f)=>f.url().includes(\"CommentBox\") || f.url().includes(\"comment\") || f.url().includes(\"cbox\"));\n        if (commentFrames.length > 0) {\n            console.log(`댓글 전용 iframe 발견: ${commentFrames.length}개`);\n            commentFrames.forEach((cf)=>console.log(\"댓글 iframe URL:\", cf.url()));\n        }\n        // 댓글 데이터 추출\n        const comments = await mainFrame.evaluate(()=>{\n            const results = [];\n            // 댓글 영역만 정확히 찾기\n            const commentContainers = [\n                \"#cbox_module\",\n                \".u_cbox\",\n                \".u_cbox_content_wrap\",\n                \"#comment\",\n                \"#commentModule\",\n                '[class*=\"u_cbox\"]'\n            ];\n            let commentArea = null;\n            // 댓글 컨테이너 찾기\n            for (const selector of commentContainers){\n                const area = document.querySelector(selector);\n                if (area) {\n                    console.log(`댓글 컨테이너 발견: ${selector}`);\n                    commentArea = area;\n                    break;\n                }\n            }\n            // 댓글 컨테이너 내부에서만 댓글 항목 찾기\n            const selectors = [\n                \".u_cbox_comment_box\",\n                \".u_cbox_list\",\n                \".u_cbox_list > li\",\n                '[class*=\"u_cbox_list\"]',\n                \".CommentItem\",\n                \".comment_item\",\n                \".comment-item\",\n                '[class*=\"CommentItem\"]',\n                '[class*=\"comment_item\"]'\n            ];\n            let commentElements = null;\n            // 댓글 컨테이너 내부에서만 검색\n            if (commentArea) {\n                for (const selector of selectors){\n                    const elements = commentArea.querySelectorAll(selector);\n                    if (elements.length > 0) {\n                        console.log(`댓글 영역 내에서 셀렉터 \"${selector}\"로 ${elements.length}개 요소 발견`);\n                        commentElements = elements;\n                        break;\n                    }\n                }\n            } else {\n                // 컨테이너를 못 찾은 경우 전체 문서에서 검색\n                console.log(\"댓글 컨테이너를 찾지 못함, 전체 문서 검색\");\n                for (const selector of selectors){\n                    const elements = document.querySelectorAll(selector);\n                    if (elements.length > 0) {\n                        console.log(`셀렉터 \"${selector}\"로 ${elements.length}개 요소 발견`);\n                        commentElements = elements;\n                        break;\n                    }\n                }\n            }\n            // 댓글 요소를 찾지 못한 경우 전체 HTML 분석\n            if (!commentElements || commentElements.length === 0) {\n                console.log(\"기본 셀렉터로 찾지 못함. 전체 HTML 분석 시작...\");\n                // class나 id에 \"comment\"가 포함된 모든 요소 찾기\n                const allElements = document.querySelectorAll(\"*\");\n                const possibleComments = [];\n                allElements.forEach((el)=>{\n                    const className = el.className?.toString().toLowerCase() || \"\";\n                    const id = el.id?.toLowerCase() || \"\";\n                    if (className.includes(\"comment\") || id.includes(\"comment\")) {\n                        possibleComments.push(el);\n                    }\n                });\n                console.log(\"comment 관련 요소:\", possibleComments.length);\n                if (possibleComments.length > 0) {\n                    // 첫 5개 요소의 클래스명 로깅\n                    possibleComments.slice(0, 5).forEach((el, i)=>{\n                        console.log(`요소 ${i + 1}:`, el.className, el.tagName);\n                    });\n                }\n            }\n            // 실제 댓글 데이터 추출\n            if (commentElements && commentElements.length > 0) {\n                commentElements.forEach((element, index)=>{\n                    try {\n                        // 모든 텍스트 노드 추출\n                        const allText = element.textContent?.trim() || \"\";\n                        if (!allText || allText.length < 2) {\n                            return;\n                        }\n                        // 닉네임 찾기 (다양한 패턴)\n                        let nickname = \"\";\n                        const nicknameSelectors = [\n                            \".comment_nickname\",\n                            \".nickname\",\n                            \".nick\",\n                            \".name\",\n                            '[class*=\"nickname\"]',\n                            '[class*=\"nick\"]',\n                            '[class*=\"name\"]'\n                        ];\n                        for (const sel of nicknameSelectors){\n                            const el = element.querySelector(sel);\n                            if (el?.textContent?.trim()) {\n                                nickname = el.textContent.trim();\n                                break;\n                            }\n                        }\n                        // 날짜 찾기\n                        let createdAt = \"\";\n                        const dateSelectors = [\n                            \".comment_time\",\n                            \".date\",\n                            \".time\",\n                            '[class*=\"date\"]',\n                            '[class*=\"time\"]'\n                        ];\n                        for (const sel of dateSelectors){\n                            const el = element.querySelector(sel);\n                            if (el?.textContent?.trim()) {\n                                createdAt = el.textContent.trim();\n                                break;\n                            }\n                        }\n                        // 댓글 내용 찾기\n                        let content = \"\";\n                        const contentSelectors = [\n                            \".comment_text\",\n                            \".text_comment\",\n                            \".comment_content\",\n                            \".content\",\n                            '[class*=\"comment_text\"]',\n                            '[class*=\"text\"]',\n                            '[class*=\"content\"]'\n                        ];\n                        for (const sel of contentSelectors){\n                            const el = element.querySelector(sel);\n                            if (el?.textContent?.trim()) {\n                                content = el.textContent.trim();\n                                break;\n                            }\n                        }\n                        // 내용을 못 찾은 경우 전체 텍스트 사용\n                        if (!content && allText.length > 10) {\n                            content = allText;\n                        }\n                        // 작성자 URL\n                        const authorLink = element.querySelector('a[href*=\"blog.naver.com\"]');\n                        const authorUrl = authorLink?.getAttribute(\"href\") || \"\";\n                        // 공감수\n                        let likes = 0;\n                        const likeEl = element.querySelector('[class*=\"like\"], [class*=\"sympathy\"], .u_cnt');\n                        if (likeEl) {\n                            const likeText = likeEl.textContent?.trim() || \"0\";\n                            likes = parseInt(likeText.replace(/\\D/g, \"\")) || 0;\n                        }\n                        // 답글수\n                        let replyCount = 0;\n                        const replyEl = element.querySelector('[class*=\"reply\"]');\n                        if (replyEl) {\n                            const replyText = replyEl.textContent?.trim() || \"0\";\n                            replyCount = parseInt(replyText.replace(/\\D/g, \"\")) || 0;\n                        }\n                        // 이미지\n                        const imageEl = element.querySelector('img[src*=\"phinf\"], img[src*=\"blogfiles\"]');\n                        const imageUrl = imageEl?.getAttribute(\"src\") || \"\";\n                        // 링크 개수\n                        const links = (content.match(/https?:\\/\\/[^\\s]+/g) || []).length;\n                        if (content && content.length > 0) {\n                            results.push({\n                                nickname: nickname || \"익명\",\n                                createdAt: createdAt || \"\",\n                                content,\n                                authorUrl,\n                                likes,\n                                replyCount,\n                                imageUrl,\n                                links\n                            });\n                        }\n                    } catch (e) {\n                        console.error(`댓글 ${index} 파싱 오류:`, e);\n                    }\n                });\n            }\n            return results;\n        });\n        console.log(`${comments.length}개의 댓글 수집 완료`);\n        return comments;\n    } catch (error) {\n        console.error(\"크롤링 오류:\", error);\n        throw error;\n    } finally{\n        await page.close();\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/puppeteer.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/tar-stream","vendor-chunks/@sparticuz","vendor-chunks/text-decoder","vendor-chunks/debug","vendor-chunks/follow-redirects","vendor-chunks/fast-fifo","vendor-chunks/wrappy","vendor-chunks/tar-fs","vendor-chunks/supports-color","vendor-chunks/streamx","vendor-chunks/pump","vendor-chunks/once","vendor-chunks/ms","vendor-chunks/has-flag","vendor-chunks/events-universal","vendor-chunks/end-of-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fblog-comments%2Fstart%2Froute&page=%2Fapi%2Fblog-comments%2Fstart%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fblog-comments%2Fstart%2Froute.ts&appDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Ctest%5Cblog_event%5Csample_left_v2%201%5Csample_left_v2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();